{"version":3,"sources":["Chat.js","Rooms.js","AuthForm.js","Login.js","Register.js","App.js","serviceWorker.js","index.js"],"names":["Chat","configureItems","props","messages","map","msg","key","id","user","username","text","items","this","React","Component","Rooms","rooms","room","className","onClick","name","AuthForm","useState","setName","password","setPass","value","onChange","e","currentTarget","type","Login","handleScreen","SCREEN_TYPES","register","onSubmit","Register","login","Header","Layout","Footer","Sider","Content","baseUrl","default","App","state","typings","addRoomVal","screenType","roomId","handleSocket","socket","io","query","token","localStorage","getItem","on","console","log","setState","handleSubmit","preventDefault","emit","handleChange","handlePress","keyCode","handleLogin","a","axios","post","res","setItem","headers","authorization","handleRegister","handleAddRoomChange","handleAddRoom","handleRoomJoin","removeListener","message","push","data","_","uniqBy","setTimeout","filter","tp","get","theme","placeholder","length","join","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbe80a68.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class Chat extends React.Component {\r\n    configureItems = () => {\r\n        return this.props.messages.map(msg => (<p key={msg.id}>{msg.user.username}:{msg.text}</p>))\r\n    };\r\n\r\n    render() {\r\n        const items = this.configureItems();\r\n\r\n        return (\r\n            <>\r\n                {items}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Button} from \"antd\";\r\n\r\nexport class Rooms extends React.Component {\r\n    render() {\r\n        return this.props.rooms.map(room => {\r\n            return (<Button className={'room-btn'} onClick={() => this.props.onClick(room.id)} key={room.id}>{room.name}</Button>);\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Button, Input} from \"antd\";\r\n\r\nexport function AuthForm(props) {\r\n    const [username, setName] = React.useState('');\r\n    const [password, setPass] = React.useState('');\r\n\r\n    return (\r\n        <div>\r\n            <h2>Username</h2>\r\n            <Input value={username} onChange={e => setName(e.currentTarget.value)} />\r\n            <h2>Password</h2>\r\n            <Input type={'password'} value={password} onChange={e => setPass(e.currentTarget.value)} />\r\n            <Button onClick={() => props.onClick(username, password)}>Submit</Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {AuthForm} from \"./AuthForm\";\r\nimport {Button} from \"antd\";\r\nimport {SCREEN_TYPES} from \"./App\";\r\n\r\nexport class Login extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Haven't got an account?</h1>\r\n                <Button onClick={() => this.props.handleScreen(SCREEN_TYPES.register)}>Register!</Button>\r\n                <AuthForm onClick={this.props.onSubmit} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {AuthForm} from \"./AuthForm\";\r\nimport {Button} from \"antd\";\r\nimport {SCREEN_TYPES} from \"./App\";\r\n\r\nexport class Register extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Already have an account?</h1>\r\n                <Button onClick={() => this.props.handleScreen(SCREEN_TYPES.login)}>Login!</Button>\r\n                <AuthForm onClick={this.props.onSubmit} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\nimport './App.css';\r\nimport {Button, Input, Layout} from \"antd\";\r\nimport {Chat} from \"./Chat\";\r\nimport {Rooms} from \"./Rooms\";\r\nimport {Login} from \"./Login\";\r\nimport {Register} from \"./Register\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nexport const baseUrl = process.env.NODE_ENV === 'production'\r\n    ? 'https://soccets.herokuapp.com'\r\n    : 'http://localhost:8080';\r\n\r\nexport const SCREEN_TYPES = {\r\n    default: 'default',\r\n    login: \"login\",\r\n    register: 'register',\r\n};\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        text: '',\r\n        messages: [],\r\n        rooms: [],\r\n        typings: [],\r\n        addRoomVal: '',\r\n        screenType: SCREEN_TYPES.login,\r\n        roomId: ''\r\n    };\r\n\r\n    handleSocket = () => {\r\n        this.socket = io(baseUrl, {query: { token: localStorage.getItem('token') }});\r\n\r\n        this.socket.on('connect', () => {\r\n            console.log('connected');\r\n        });\r\n\r\n        this.socket.on('rooms', (rooms) => {\r\n            this.setState({\r\n                rooms,\r\n            })\r\n        })\r\n    };\r\n\r\n    async componentDidMount() {\r\n        if (!localStorage.getItem('token')) {\r\n            return this.handleScreen(SCREEN_TYPES.login);\r\n        }\r\n\r\n        const res = await axios.get(`${baseUrl}/user`, {headers: {\r\n            'Authorization': localStorage.getItem('token')\r\n            }});\r\n\r\n        if (!res) {\r\n            return this.handleScreen(SCREEN_TYPES.login);\r\n        }\r\n\r\n        localStorage.setItem('token', res.headers.authorization);\r\n        this.handleScreen(SCREEN_TYPES.default);\r\n\r\n        this.handleSocket();\r\n    }\r\n\r\n    handleScreen = (screenType) => {\r\n      this.setState({\r\n          screenType\r\n      })\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!this.state.text) {\r\n            return;\r\n        }\r\n\r\n        this.socket.emit('message', {\r\n            text: this.state.text,\r\n            roomId: this.state.roomId,\r\n        });\r\n\r\n        this.setState({\r\n            text: '',\r\n        })\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            text: e.currentTarget.value\r\n        })\r\n\r\n        this.socket.emit('room/typing', {id: this.state.roomId});\r\n    };\r\n\r\n    handlePress = (e) => {\r\n        if (e.keyCode !== 13) {\r\n            return;\r\n        }\r\n\r\n        this.handleSubmit(e);\r\n    };\r\n\r\n    handleLogin = async (username, password) => {\r\n        const res = await axios.post(`${baseUrl}/user/login`, {username, password});\r\n\r\n        localStorage.setItem('token', res.headers.authorization);\r\n        this.handleScreen(SCREEN_TYPES.default);\r\n        this.handleSocket();\r\n    };\r\n\r\n    handleRegister = async (username, password) => {\r\n        const res = await axios.post(`${baseUrl}/user/register`, {username, password});\r\n\r\n        localStorage.setItem('token', res.headers.authorization);\r\n        this.handleScreen(SCREEN_TYPES.default);\r\n        this.handleSocket();\r\n    };\r\n\r\n    handleAddRoomChange = (e) => {\r\n        this.setState({\r\n            addRoomVal: e.currentTarget.value,\r\n        })\r\n    };\r\n\r\n    handleAddRoom = () => {\r\n        this.socket.emit('room/new', {name: this.state.addRoomVal});\r\n        this.setState({\r\n            addRoomVal: '',\r\n        })\r\n    };\r\n\r\n    handleRoomJoin = (roomId) => {\r\n        if (roomId === this.state.roomId) {\r\n            return;\r\n        }\r\n\r\n        this.socket.removeListener(`room/${this.state.roomId}`);\r\n        this.socket.removeListener(`room/${this.state.roomId}/joiners`);\r\n        this.socket.removeListener(`room/${this.state.roomId}/message`);\r\n        this.socket.removeListener(`room/${this.state.roomId}/typing`);\r\n        this.setState({roomId});\r\n        this.socket.on(`room/${roomId}`, (messages) => {\r\n            this.setState({messages});\r\n        });\r\n        this.socket.on(`room/${roomId}/joiners`, (message) => {\r\n            const messages = [...this.state.messages];\r\n            messages.push(message);\r\n\r\n            this.setState({messages});\r\n        });\r\n        this.socket.on(`room/${roomId}/message`, (messages) => {\r\n            this.setState({\r\n                messages\r\n            });\r\n        });\r\n        this.socket.on(`room/${roomId}/typing`, (data) => {\r\n            this.setState({\r\n                typings: _.uniqBy([...this.state.typings, data], 'user.id')\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    typings: this.state.typings.filter(tp => tp.roomId !== roomId && tp.user.id !== data.user.id),\r\n                })\r\n            }, 1000);\r\n        });\r\n        this.socket.emit(`room/join`, {id: roomId});\r\n    };\r\n\r\n    render() {\r\n        if (this.state.screenType === SCREEN_TYPES.login) {\r\n            return (<Login onSubmit={this.handleLogin} handleScreen={this.handleScreen} />);\r\n        }\r\n\r\n        if (this.state.screenType === SCREEN_TYPES.register) {\r\n            return (<Register onSubmit={this.handleRegister} handleScreen={this.handleScreen} />);\r\n        }\r\n\r\n        return (\r\n            <Layout>\r\n                <Header>Header</Header>\r\n                <Layout>\r\n                    <Sider theme={'light'}>\r\n                        <Rooms rooms={this.state.rooms} onClick={this.handleRoomJoin} />\r\n                        <Input value={this.state.addRoomVal} onChange={this.handleAddRoomChange} placeholder={'Room name for add'} />\r\n                        <Button onClick={this.handleAddRoom}>Add room</Button>\r\n                    </Sider>\r\n                    <Layout className={'chat-layout'}>\r\n                        <Content>\r\n                            <Chat messages={this.state.messages} />\r\n                            {!!this.state.typings.length && (\r\n                                <span>{this.state.typings.filter(tp => tp.roomId === this.state.roomId).map(tp => tp.user.username).join(', ')} is typing</span>\r\n                            )}\r\n                        </Content>\r\n                        <Footer>\r\n                            <Input value={this.state.text} onKeyDown={this.handlePress} onChange={this.handleChange}/>\r\n                            <Button type=\"submit\" onClick={this.handleSubmit}>отправить</Button>\r\n                        </Footer>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}